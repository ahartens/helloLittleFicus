20 May 2015
	QUESTIONS
********************************************************************************
********************************************************************************
	
	1) Creates data frame with true and false data and corresponding response 
	dependent variable

	2) Creates formula for model with same number of variables as columns
	(one variable per column)

	3) Perform GLM

********************************************************************************


	truetable = read.table('/Users/ahartens/Desktop/Robinson/RESULTS/hpoData/ptg/Abnormal_CNS_myelination.csv',  header=FALSE,	sep=",",	fill=TRUE,	skip = 2,	row.names=1)


	falsetable = read.table('/Users/ahartens/Desktop/Robinson/RESULTS/hpoData/ptg/Abnormal_morphology_of_bones_of_the_upper_limbs.csv',header=FALSE,sep=",",fill=TRUE,	skip = 2,	row.names=1)
	falsetableCombined = falsetable

	falsetable = read.table('/Users/ahartens/Desktop/Robinson/RESULTS/hpoData/ptg/Abnormality_of_circulating_enzyme_level.csv',header=FALSE,sep=",",fill=TRUE,	skip = 2,	row.names=1)
	falsetableCombined = rbind(falsetableCombined,falsetable)


	falsetable = read.table('/Users/ahartens/Desktop/Robinson/RESULTS/hpoData/ptg/Abnormality_of_the_genitourinary_system.csv',header=FALSE,sep=",",fill=TRUE,	skip = 2,	row.names=1)
	falsetableCombined = rbind(falsetableCombined,falsetable)



	allForTest = rbind(truetable,falsetableCombined)


	y = matrix(nrow=nrow(allForTest),ncol=1)
	for(i in 1:nrow(truetable)){
	  y[i] = 1
	}
	for(i in 1:nrow(falsetableCombined)){
	  y[nrow(truetable)+i] = 0;
	}


	vars = paste("V",2:ncol(allForTest)+1,sep="")
	allVars = paste(vars,collapse="+")
	fmla = as.formula(paste("y~",allVars))

	model = glm(fmla,allForTest,family=binomial)

********************************************************************************
********************************************************************************

********************************************************************************
********************************************************************************
	
	Goes through all random normalized data and uses model created to predict
	if gene a member of 'true' group. prints results out

********************************************************************************


	data = read.table('/Users/ahartens/Desktop/NormalizedBrainExpression2.csv',header=FALSE,sep=",")
	
	names = read.table('/Users/ahartens/Desktop/NormalizedBrainExpressionRowAnnots2.csv',header=FALSE,sep=",")
	names = as.matrix(names)
	
	results = matrix(nrow=30,ncol=2)
	results = as.data.frame(results)
	for (i in 1:nrow(results)){
	  results[i,1] = names[i,1]
	  response = predict(model,data[i,],type="response")
	  results[i,2] = response[[1]]
	}
	write.table(results, file="/Users/ahartens/Desktop/tryPredict2.csv",append=TRUE, sep=",",col.names = F, row.names = F);

********************************************************************************
********************************************************************************









16 May 2015
	
********************************************************************************


	//	Programatically imput data tables
	truetable = read.table('/Users/ahartens/Desktop/Robinson/RESULTS/hpoData/ptg/Abnormal_CNS_myelination.csv',header=FALSE,sep=",",fill=TRUE)
	truetable = truetable[-1,-1]

	falsetable = read.table('/Users/ahartens/Desktop/Robinson/RESULTS/hpoData/ptg/Abnormal_morphology_of_bones_of_the_upper_limbs.csv',header=FALSE,sep=",",fill=TRUE)
	falsetableClipped = falsetable[-1,-1]
	falsetableCombined = falsetableClipped

	falsetable = read.table('/Users/ahartens/Desktop/Robinson/RESULTS/hpoData/ptg/Abnormality_of_circulating_enzyme_level.csv',header=FALSE,sep=",",fill=TRUE)
	falsetableClipped = falsetable[-1,-1]
	falsetableCombined = rbind(falsetableCombined,falsetableClipped)


	falsetable = read.table('/Users/ahartens/Desktop/Robinson/RESULTS/hpoData/ptg/Abnormality_of_the_genitourinary_system.csv',header=FALSE,sep=",",fill=TRUE)
	falsetableClipped = falsetable[-1,-1]
	falsetableCombined = rbind(falsetableCombined,falsetableClipped)

	allForTest = rbind(truetable,falsetableCombined)


	testMatrix = matrix(nrow=nrow(allForTest),ncol=ncol(allForTest))
	for (i in 1:nrow(allForTest)){
	  for(j in 1:ncol(allForTest)){
	    testMatrix[i,j] = allForTest[i,j] 
	  }
	}
	testMatrix = as.data.frame(testMatrix)

	//	Programatically create response values
	y = matrix(nrow=nrow(testMatrix),ncol=1)
	for(i in 1:nrow(truetable)){
	  y[i] = 1
	}
	n
	for(i in 1:nrow(falsetableCombined)){
	  y[nrow(truetable)+i] = 0;
	}


	//	Create variables
	vars = paste("V",1:ncol(testMatrix),sep="")
	allVars = paste(vars,collapse="+")
	fmla = as.formula(paste("y~",allVars))

	//	Create model
	model = glm(fmla,testMatrix,family=binomial)

	****************************************************************************




15 May 2015

	
	****************************************************************************
	/*
	*	Use model created on 13.15 to predict membership of genes in 'nail color' to 'abnormal CNS mylenation' (to which model was created)
	*		
	*/

	try = read.table('/Volumes/Transcend/lab/ptg_singleDonor/Abnormality_of_nail_color.csv',header=FALSE,sep=",")
	asMatrix = as.matrix(try)
	names = asMatrix[,1]
	data = matrix(nrow=nrow(try)-1,ncol=ncol(try)-1)
	for (i in 2:nrow(try)){
	  for(j in 2:ncol(try)){
	    data[i-1,j-1] = try[i,j] 
	  }
	}
	data = as.data.frame(data)

	results = matrix(nrow=nrow(data),ncol=2)
	for (i in 1:nrow(data)){
	  results[i,1] = names[i+1]
	  results[i,2] = predict(model,data[i,],type="response")
	}
	write.table(results, file="/Users/ahartens/Desktop/tryPredict.csv",append=TRUE, sep=",",col.names = F, row.names = F);


	****************************************************************************
13.	May 2015
	
	true.csv =  "Abnormal_CNS_myelination.csv" = true
	false.csv = "Abnormal_morphology_of_bones_of_the_upper_limbs.csv" + "Abnormality_of_circulating_enzyme_level.csv"
	column 946 has all 1s for true, all 0s for false

	in r make table = rbind (true + false)
	seen = table[,946]
	data = table[,c(1:945)]

	//	NEED TO MAKE A FORMULA
	xname = paste("V",1:945,sep="")
	fmla = as.formula(paste("y~",paste(xname,collapse="+")))
	
	//	MAKE MODEL
	model = glm(fmla,data,family=binomial)

	//	MAKE PREDICATIONS BASED ON MODEL
	predict(huh,data[1,])


	//	TRY NLS : DOESN'T WORK BECAUSE DON'T HAVE NOISE! EITHER 'TRUE OR FALSE', 0 OR 1 APPARENTLY GIVE WARNING : 
	"Error in nls(tryform, data) : singular gradient"
	tryform = "seen~a/(1+exp(-(b+ t1*V1 + t2*V2 + t3*V3)/c))"
	why = nls(tryform,data)

	- MABYE PER GENE, IF IT IS MEMBER OF ONLY ONE HPO TERM THEN IT IS A TRUE '1'
	THE MORE HPO TERMS IT IS A MEMBER OF, THE LOWER IS SCORE

	true = read.table("/Users/ahartens/Desktop/true.csv",sep=",",header=FALSE)
	false = read.table("/Users/ahartens/Desktop/false.csv",sep=",",header=FALSE)
	all = rbind(true,false)
	y = all[,946]
	all=all[,c(1:945)]

	myvars = paste("t", 1:945, sep="")
	vvars = paste("V",1:945,sep="")
	for (i in 1:945)
	    vvars[i] = paste(myvars[i],vvars[i],sep="*")

	allVars = paste(vvars,collapse="+")

	form = paste("y~a/(1+exp(-(b+",allVars)
	form = paste(form,")))")
	form = as.formula(form)
	why = nls(form,data)

30. January 2015
	DONE TODAY :
	uploaded everything to svn, as well as cleaned up svn directory
	2) checked that my pearsons correlation coefficeint is correct with r : get same minimum value (0.7773679), first line looks the same! (is further checkign necessary?)



29. January 2015
	
	TO DO :
	upload to svn
	still figure out when to stop clustering
	cluster initilization still weird
	empty clustering sitll not happy =/

	DONE TODAY :
    Disaster struck when trying to move stuff between text editors as well as remove kmeans object
    1) kmeansboject no longer exists, is replaced by kmeans (kmeans was transiently named kmeansprototype - led to problems 
      as well - beware)
    - kmeansable no longer exists, instead feed variable components (dist cal, get k, cluster init)
      in constructor methods of kmeans
    - remeber that when running allendata have to feed in maximum/ actually accurate size of MicroarrayExpression 
      (so at end 63,000, currently only 100! led to major problems in printing out cluster)
    - printed out cluster assignments from allen
    2) handling of empty clusters! still not perfect... after each point assigned to cluster, checks to see if empty clusters exist
    - if empty cluster exists, assigns new cluster prototype (cp) from cluster with largest sse (scatter)



28. January 2015
    
    TO DO:
    When to stop clustering? when <1% clusters change cluster assignment?

    DONE TODAY : 
    - cluster basic now picks random rows as initial cluster prototypes (dumb randomizaiton: previous took just first 3)
    - started handling of empty clusters



25. January 2015
	making uniform random matrix generator object for gapstat
	- in order to do so requires max/min of each tissue (column). therfore added calcSummary method 
	  to matrix. calculates max/min of each row and column, storing in private field of matrix class
	- ALSO calculates mean of each row/min

	to do : getAllMeans ( i think that was for biclustering?) calculates all means as well, is superfluous 
	if have dataSummary method


	- unsure as where/when to call 'dataSummary': only when wish to create uniform random distributions?.
	  could theoretically also be calculated while reading in data.


	THOUGHTS :
	1) Do 3 vesicles of brain development leave footprints ... Mean across across structure and compare 
	 means.. is that at all reasonable?

	2) Compare neighboring structure and distant structure.. should probably use r for that.


24. January 2015
	given a gene or group of geens, get matrix of gene expression across all tissues
	also get list of tissues with high/low expression for given cut off


22. January 2015
	Kmeans class can now return clustered data points. getClusters() returns an array of matrices.
	used by gapstat to make distance matrix and calculate pairwise distance
	however.. what i thought was gap stat is not quite gap stat. going back to reading but am confused..

21. January 2015
	split 'clustering' package into multiple directories. kmeans now a subdirectory split into :
	1) algorithm : contains
		- kmeanobjects : algorithmic implmentation of kmeans
		- variations of kmeans : provide components to kmeanobjects
	2) interface : contains all methods that must be implemented by a kmeans algorithm
	3) components directory
		- initclusters
		- calck
		- distanceCalc

	- created kmeansbasic test class. tests basic implementation of kmeans with sample file. compared 
	  to r file, works. how to test?
	- did euclidean distance test class
	-

16. January 2015
	Thinking about big picture.
	At end of whatever clustering is done, will get a cluster vector
	from an mxn data matrix, receive an m cluster vector
	each row of matrix has a corresponding value in vector which corresponds to index of cluster it is assigned to
	From this list of cluster assignments can get indexes of genes assigned to a certain cluster. so :

	1) created Allen directory. will contain classes that hold allen brain atlas data. desired funcitonality :
		- return gene names of given indexes (eg. all genes belonging to one cluster)
		- return tissue names
	to do :
		- return DATA (not just names??) associated with given tissues..hm... this is different

15. January 2015
	1) I don't think my similarity matrix is a similarity matrix at all. it's a distance matrix..
	want to either take :
	- the inner product (dot product)
	- Pearson Correlation Coefficient : dot product of standardized (ie. centered on their means + scaled by stdev)

	2) about confusion of yesterday : in book says about kmeans clustering that a proximity matrix isn't needed... so i just feed it the raw (ie. normalized) data?

	3) from tibshirani "estimating the number of clusters in a data set via the gap statistic"

14. January 2015
		- NOW TOTALLY CONFUSED. how does one cluster pairwise distances? researching spectral clustering, k mediod apparently, kernel kmeans..huh?


		- added clustering directory parallel to matrix (as well as tests)
		- added kmeans class. as it stands, kmeans can be relatively subclassed easily
		- major question :
				do i want each part of kmeans to be a different class? for example, should
				1) calculating k (later gapstat)
				2) cluster initialization
				3) calculating distance from cluster center
				4) recalculating mean
				all be a separate classes, so that a very basic kmeans calls modular parts
		as it is now, the entire kmeans class can be subclassed and the parts that one wishes to change can be simply overridden.. but doesn't seem too elegant. hm...

13. January 2015

		- removed mean normalization + feature scaling : these will be done prior to starting program (matlab, r)
		- made similarity matrix more efficient (is now a diagonal)

12. January 2015

		believe I added a similarity matrix based on euclidian distance
		- subclass of 'matrix' object
		- calls 'super.setMatrix' in constructor method

		Now :
		- mean normalization?

		Still to do:
		- hard coded test of dotproduct

11. January 2015

		reading about interface
		suggestion was have a 'matrix' interface which both the data matrix and similarity matrix implement seems counterintuitive; i would have to implement methods twice eg. copy and paste matrix multiplication into both classes (these calculations remain identical) . why not just have 'dataMatrix' and 'similarityMatrix' be subclasses of matrix

		if do wish to have matrix calculations be declared in interface such as 'Computable' which declares functions such as 'multiply' and 'inverse' (adhering to interfaces as adjectives and classes has nouns) seems more plausable.. but why do this? Do we intend to :
		1) create matrices that don't implement matrix calculations?
		2) have non matrix classes implement matrix calculations?

		maybe i didn't understand suggestion.

		or.. maybe interface is just there to declare methods as api so that eg. in cluster analysis I know what can be done with matrix object


		OR : have Matrix interface , then Matrixcalculations class that implements them
		- further matrix objects such as 'Datatable' and 'Similaritymatrix' have an object Matrixcalculations that can implement methods..


		--> downloaded human brain ontology used by allen brain project.
		1) should keep data in a dictionary, with 'id' as key and 'structure object' as value? each structure object has a 'parent_id' field and an array of children?
		or 2) have each structure have an array of parents and


9. January 2015
		1) Added matrix matrix multiplication and some unit testing : same as transposition, how thoroughly shoudl results be tested? with matrix of known answer? pos/neg/zero values?
		2) Added matrix scalar multiplication and some unit testing :
		Questions :
		- how thoroughly is unit testing reasonable? With pre-defined answers, or perform parallel operation and check results?
		- should i check for null argument at every step ?



8. January 2015
		1) added addition method to matrix, and corressponding unit testing
		2) simple transpostion, copying values into new empty matrix : INEFFICIENT! in situs transposition for square matrices
		**how should one unit test for transposition??




7. January 2015
		1) Download Allen Brain Atlas
		http://human.brain-map.org/static/download

		.Complete normalized microarray datasets

		Complete microarray datasets for the full complement of six brains are available for download. The datasets contain gene expression values normalized across all brains using an improved normalization process implemented in March 2013.

		Downloadable files containing all normalized microarray expression values as well as probe and sample metadata necessary for analysis: H0351.2001, H0351.2002, H0351.1009, H0351.1012, H0351.1015, H0351.1016.

		An XML or CSV link to meta-information and URL to download each of the raw microarray files.
